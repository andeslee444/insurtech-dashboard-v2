{"ast":null,"code":"import { opportunityData } from '../data/mockData';\n\n/**\n * Analyzes opportunity data to find top investment opportunities.\n */\nconst gapAnalysis = {\n  /**\n   * Gets the top N opportunities sorted by overallScore (descending).\n   * @param count The number of top opportunities to return.\n   * @returns An array of the top N Opportunity objects.\n   */\n  getTopOpportunities: count => {\n    // Sort opportunities by overallScore in descending order\n    const sortedOpportunities = [...opportunityData].sort((a, b) => b.overallScore - a.overallScore);\n\n    // Return the top N opportunities\n    return sortedOpportunities.slice(0, count);\n  },\n  // Placeholder for potential future analysis functions\n  analyzeInvestmentTiming: category => {\n    // Placeholder logic - return default values\n    console.warn(`gapAnalysis.analyzeInvestmentTiming not implemented for category: ${category}`);\n    return {\n      recommendedStage: 'Seed/Series A',\n      timingScore: 5\n    }; // Default return\n  },\n  calculateValuationPremium: category => {\n    // Placeholder logic - return default values with factors\n    console.warn(`gapAnalysis.calculateValuationPremium not implemented for category: ${category}`);\n    // Return structure expected by ValuationPremiumCalculator component\n    return {\n      expectedPremium: 15.0 + Math.random() * 10,\n      // Add some variation\n      premiumFactors: {\n        technologyEnabled: 5.0 + Math.random() * 2,\n        growthRate: 4.0 + Math.random() * 2,\n        marketPosition: 6.0 + Math.random() * 2\n      }\n    }; // Default return\n  },\n  analyzeExitPathways: category => {\n    // Placeholder logic - return default values\n    console.warn(`gapAnalysis.analyzeExitPathways not implemented for category: ${category}`);\n    return {\n      recommendedPathway: 'Acquisition',\n      expectedMultiple: 3.0\n    }; // Default return\n  },\n  identifyWhiteSpaces: () => {\n    // Placeholder logic - return default structure based on usage\n    console.warn('gapAnalysis.identifyWhiteSpaces not implemented.');\n    // Needs to return array of objects with at least category, marketNeed, opportunitySize\n    return [{\n      category: 'Dummy Category 1',\n      marketNeed: 'Dummy Need A',\n      opportunitySize: 8.0\n    }, {\n      category: 'Dummy Category 2',\n      marketNeed: 'Dummy Need B',\n      opportunitySize: 6.5\n    }, {\n      category: 'Dummy Category 3',\n      marketNeed: 'Dummy Need C',\n      opportunitySize: 9.0\n    }, {\n      category: 'Dummy Category 4',\n      marketNeed: 'Dummy Need D',\n      opportunitySize: 5.0\n    }]; // Default return\n  }\n};\nexport default gapAnalysis;","map":{"version":3,"names":["opportunityData","gapAnalysis","getTopOpportunities","count","sortedOpportunities","sort","a","b","overallScore","slice","analyzeInvestmentTiming","category","console","warn","recommendedStage","timingScore","calculateValuationPremium","expectedPremium","Math","random","premiumFactors","technologyEnabled","growthRate","marketPosition","analyzeExitPathways","recommendedPathway","expectedMultiple","identifyWhiteSpaces","marketNeed","opportunitySize"],"sources":["/Users/andeslee/Documents/Cursor Projects/Building Interactive Website for Stripes Venture Capital/src/utils/gapAnalysis.ts"],"sourcesContent":["import { opportunityData, Opportunity } from '../data/mockData';\n\n/**\n * Analyzes opportunity data to find top investment opportunities.\n */\nconst gapAnalysis = {\n  /**\n   * Gets the top N opportunities sorted by overallScore (descending).\n   * @param count The number of top opportunities to return.\n   * @returns An array of the top N Opportunity objects.\n   */\n  getTopOpportunities: (count: number): Opportunity[] => {\n    // Sort opportunities by overallScore in descending order\n    const sortedOpportunities = [...opportunityData].sort((a, b) => b.overallScore - a.overallScore);\n    \n    // Return the top N opportunities\n    return sortedOpportunities.slice(0, count);\n  },\n\n  // Placeholder for potential future analysis functions\n  analyzeInvestmentTiming: (category: string) => {\n    // Placeholder logic - return default values\n    console.warn(`gapAnalysis.analyzeInvestmentTiming not implemented for category: ${category}`);\n    return { recommendedStage: 'Seed/Series A', timingScore: 5 }; // Default return\n  },\n\n  calculateValuationPremium: (category: string) => {\n    // Placeholder logic - return default values with factors\n    console.warn(`gapAnalysis.calculateValuationPremium not implemented for category: ${category}`);\n    // Return structure expected by ValuationPremiumCalculator component\n    return {\n      expectedPremium: 15.0 + Math.random() * 10, // Add some variation\n      premiumFactors: {\n        technologyEnabled: 5.0 + Math.random() * 2,\n        growthRate: 4.0 + Math.random() * 2,\n        marketPosition: 6.0 + Math.random() * 2\n      }\n    }; // Default return\n  },\n\n  analyzeExitPathways: (category: string) => {\n    // Placeholder logic - return default values\n    console.warn(`gapAnalysis.analyzeExitPathways not implemented for category: ${category}`);\n    return { recommendedPathway: 'Acquisition', expectedMultiple: 3.0 }; // Default return\n  },\n\n  identifyWhiteSpaces: () => {\n    // Placeholder logic - return default structure based on usage\n    console.warn('gapAnalysis.identifyWhiteSpaces not implemented.');\n    // Needs to return array of objects with at least category, marketNeed, opportunitySize\n    return [\n      { category: 'Dummy Category 1', marketNeed: 'Dummy Need A', opportunitySize: 8.0 },\n      { category: 'Dummy Category 2', marketNeed: 'Dummy Need B', opportunitySize: 6.5 },\n      { category: 'Dummy Category 3', marketNeed: 'Dummy Need C', opportunitySize: 9.0 },\n      { category: 'Dummy Category 4', marketNeed: 'Dummy Need D', opportunitySize: 5.0 },\n    ]; // Default return\n  }\n};\n\nexport default gapAnalysis;\n"],"mappings":"AAAA,SAASA,eAAe,QAAqB,kBAAkB;;AAE/D;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;EACEC,mBAAmB,EAAGC,KAAa,IAAoB;IACrD;IACA,MAAMC,mBAAmB,GAAG,CAAC,GAAGJ,eAAe,CAAC,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,YAAY,GAAGF,CAAC,CAACE,YAAY,CAAC;;IAEhG;IACA,OAAOJ,mBAAmB,CAACK,KAAK,CAAC,CAAC,EAAEN,KAAK,CAAC;EAC5C,CAAC;EAED;EACAO,uBAAuB,EAAGC,QAAgB,IAAK;IAC7C;IACAC,OAAO,CAACC,IAAI,CAAC,qEAAqEF,QAAQ,EAAE,CAAC;IAC7F,OAAO;MAAEG,gBAAgB,EAAE,eAAe;MAAEC,WAAW,EAAE;IAAE,CAAC,CAAC,CAAC;EAChE,CAAC;EAEDC,yBAAyB,EAAGL,QAAgB,IAAK;IAC/C;IACAC,OAAO,CAACC,IAAI,CAAC,uEAAuEF,QAAQ,EAAE,CAAC;IAC/F;IACA,OAAO;MACLM,eAAe,EAAE,IAAI,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;MAAE;MAC5CC,cAAc,EAAE;QACdC,iBAAiB,EAAE,GAAG,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC;QAC1CG,UAAU,EAAE,GAAG,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC;QACnCI,cAAc,EAAE,GAAG,GAAGL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;MACxC;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDK,mBAAmB,EAAGb,QAAgB,IAAK;IACzC;IACAC,OAAO,CAACC,IAAI,CAAC,iEAAiEF,QAAQ,EAAE,CAAC;IACzF,OAAO;MAAEc,kBAAkB,EAAE,aAAa;MAAEC,gBAAgB,EAAE;IAAI,CAAC,CAAC,CAAC;EACvE,CAAC;EAEDC,mBAAmB,EAAEA,CAAA,KAAM;IACzB;IACAf,OAAO,CAACC,IAAI,CAAC,kDAAkD,CAAC;IAChE;IACA,OAAO,CACL;MAAEF,QAAQ,EAAE,kBAAkB;MAAEiB,UAAU,EAAE,cAAc;MAAEC,eAAe,EAAE;IAAI,CAAC,EAClF;MAAElB,QAAQ,EAAE,kBAAkB;MAAEiB,UAAU,EAAE,cAAc;MAAEC,eAAe,EAAE;IAAI,CAAC,EAClF;MAAElB,QAAQ,EAAE,kBAAkB;MAAEiB,UAAU,EAAE,cAAc;MAAEC,eAAe,EAAE;IAAI,CAAC,EAClF;MAAElB,QAAQ,EAAE,kBAAkB;MAAEiB,UAAU,EAAE,cAAc;MAAEC,eAAe,EAAE;IAAI,CAAC,CACnF,CAAC,CAAC;EACL;AACF,CAAC;AAED,eAAe5B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}